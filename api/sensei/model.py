# generated by datamodel-codegen:
#   filename:  causemos-api.yml
#   timestamp: 2022-01-10T16:43:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class TimeSery(BaseModel):
    timestamp: Optional[float] = None
    value: Optional[float] = None


class TimeSeries(BaseModel):
    __root__: List[TimeSery]


class TimeSeriesDistributionItem(BaseModel):
    timestamp: Optional[float] = None
    values: Optional[List[float]] = None


class TimeSeriesDistribution(BaseModel):
    __root__: List[TimeSeriesDistributionItem]


class _ConceptName(BaseModel):
    name: Optional[str] = None
    func: Optional[str] = None
    numLevels: Optional[float] = None
    values: Optional[TimeSeries] = None
    resolution: Optional[str] = Field(
        None, description='Describes resolution of values, e.g. month, year'
    )
    period: Optional[float] = Field(
        None,
        description='Indicates seasonality period. If period=1 then there is no seasonality.',
    )

# Manually generated.
class Node(BaseModel):
    concept: Optional[str] = None
    indicator: Optional[str] = None
    minValue: Optional[float] = None
    maxValue: Optional[float] = None
    values: Optional[List[TimeSery]] = None
    numLevels: Optional[float] = None
    resolution: Optional[str] = Field(
        None, description='Describes resolution of values, e.g. month, year'
    )
    period: Optional[float] = Field(
        None,
        description='Indicates seasonality period. If period=1 then there is no seasonality.',
    )
    func: Optional[str] = None
      
# Manually generated.
class Edge(BaseModel):
    source: Optional[str] = None
    target: Optional[str] = None
    polarity: Optional[float] = None
    weights: Optional[List[float]] = None
    statements: Optional[List[Dict[str, Any]]] = Field(
        None, description='Causemos INDRA statement'
    )

class ConceptIndicators(BaseModel):
    _conceptName_: Optional[_ConceptName] = Field(
        None, alias='<conceptName>', description='Concept node name'
    )


class ModelCreationRequest(BaseModel):
    id: Optional[str] = Field(None, description='A Causemos model UUID')
    statements: Optional[List[Dict[str, Any]]] = Field(
        None, description='Causemos INDRA statement'
    )
    conceptIndicators: Optional[ConceptIndicators] = Field(
        None, description='Node parameters'
    )

    # Manually added to accomondate /td-models/tests-2021-11/data/dyse-graph-like1/model.json
    nodes: Optional[List[Node]] = Field(
        None, descrption='nodes'
    )
    edges: Optional[List[Edge]] = Field(
        None, descrption='edges'
    )


class _ConceptName1(BaseModel):
    initialValue: Optional[float] = None
    scalingFactor: Optional[float] = Field(
        None, description='optional, provided if engine supports y-scaling'
    )
    scalingBias: Optional[float] = Field(
        None, description='optional, provided if engine supports y-scaling'
    )


class ConceptIndicators1(BaseModel):
    _conceptName_: Optional[_ConceptName1] = Field(None, alias='<conceptName>')


class Relation(BaseModel):
    source: Optional[str] = None
    target: Optional[str] = None
    weights: Optional[List[float]] = None


class ModelCreationResponse(BaseModel):
    status: Optional[str] = None
    conceptIndicators: Optional[ConceptIndicators1] = None
    relations: Optional[List[Relation]] = None


class ExperimentType(Enum):
    PROJECTION = 'PROJECTION'
    SENSITIVITY_ANALYSIS = 'SENSITIVITY_ANALYSIS'


class ModelExperimentCreationRequest(BaseModel):
    experimentType: Optional[ExperimentType] = None


class ValueItem(BaseModel):
    step: Optional[float] = None
    value: Optional[float] = None


class Constraint(BaseModel):
    concept: Optional[str] = None
    value: Optional[List[ValueItem]] = None


class ExperimentParams(BaseModel):
    startTime: Optional[float] = None
    timeStepsInMonths: Optional[float] = None
    constraints: Optional[List[Constraint]] = None


class ProjectionParameters(ModelExperimentCreationRequest):
    experimentParams: Optional[ExperimentParams] = None


class AnalysisType(Enum):
    IMMEDIATE = 'IMMEDIATE'
    GLOBAL = 'GLOBAL'
    PATHWAYS = 'PATHWAYS'


class AnalysisMode(Enum):
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'


class AnalysisMethodology(Enum):
    HYBRID = 'HYBRID'
    FUNCTION = 'FUNCTION'


class PathAtt(Enum):
    INFLUENCE = 'INFLUENCE'
    SENSITIVITY = 'SENSITIVITY'


class AnalysisParam(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    pathAtt: Optional[PathAtt] = None
    numPath: Optional[float] = None


class ExperimentParams1(BaseModel):
    startTime: Optional[float] = None
    endTime: Optional[float] = None
    numTimesteps: Optional[float] = None
    analysisType: Optional[AnalysisType] = None
    analysisMode: Optional[AnalysisMode] = None
    analysisMethodology: Optional[AnalysisMethodology] = None
    analysisParam: Optional[AnalysisParam] = None


class SensitivityAnalysisParameters(ModelExperimentCreationRequest):
    experimentParams: Optional[ExperimentParams1] = None


class ExperimentType1(Enum):
    PROJECTION = 'PROJECTION'
    SENSITIVITY_ANALYSIS = 'SENSITIVITY_ANALYSIS'


class Status(Enum):
    Completed = 'Completed'
    In_Progress = 'In Progress'


class ModelExperimentStatusResponse(BaseModel):
    modelId: Optional[UUID] = None
    experimentId: Optional[UUID] = None
    experimentType: Optional[ExperimentType1] = None
    status: Optional[Status] = None
    progressPercentage: Optional[float] = None


class Result(BaseModel):
    concept: Optional[str] = None
    values: Optional[TimeSeriesDistribution] = None


class ProjectionResponse(ModelExperimentStatusResponse):
    results: Optional[List[Result]] = None


class Immediate(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    value: Optional[List[float]] = None


class Global(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    value: Optional[List[float]] = None


class Pathways(BaseModel):
    path: Optional[List[str]] = None
    score: Optional[float] = None


class SensitivityAnalysisResponse(ModelExperimentStatusResponse):
    immediate: Optional[Immediate] = None
    global_: Optional[Global] = Field(None, alias='global')
    pathways: Optional[Pathways] = None


class Relation1(BaseModel):
    source: Optional[str] = None
    target: Optional[str] = None
    polarity: Optional[float] = None
    weights: Optional[List[float]] = None

# Modified to use manually-created Edge class.
class EditEdgesRequest(BaseModel):
    #relations: Optional[List[Relation1]] = None
    edges: Optional[List[Edge]] = None

class EditEdgesResponse(BaseModel):
    status: Optional[str] = None

# Manually generated:
class EditNodesRequest(BaseModel):
    nodes: Optional[List[Node]] = None
