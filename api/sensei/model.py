# generated by datamodel-codegen:
#   filename:  causemos-api.yml
#   timestamp: 2022-01-24T16:49:34+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Subj(BaseModel):
    concept: Optional[str] = None
    factor: Optional[str] = None
    adjectives: Optional[List[str]] = None
    polarity: Optional[float] = None


class Obj(BaseModel):
    concept: Optional[str] = None
    factor: Optional[str] = None
    adjectives: Optional[List[str]] = None
    polarity: Optional[float] = None


class EvidenceContext(BaseModel):
    subj_polarity: Optional[float] = None
    subj_adjectives: Optional[List[str]] = None
    obj_polarity: Optional[float] = None
    obj_adjectives: Optional[List[str]] = None


class EvidenceItem(BaseModel):
    document_context: Optional[Dict[str, Any]] = Field(
        None, description='document provenance for the evidence'
    )
    evidence_context: Optional[EvidenceContext] = Field(
        None, description='evidence level extraction data'
    )


class Statement(BaseModel):
    subj: Optional[Subj] = None
    obj: Optional[Obj] = None
    evidence: Optional[List[EvidenceItem]] = None


class TimeSery(BaseModel):
    timestamp: Optional[float] = None
    value: Optional[float] = None


class TimeSeries(BaseModel):
    __root__: List[TimeSery]


class TimeSeriesDistributionItem(BaseModel):
    timestamp: Optional[float] = None
    values: Optional[List[float]] = None


class TimeSeriesDistribution(BaseModel):
    __root__: List[TimeSeriesDistributionItem]


class Edge(BaseModel):
    source: Optional[str] = Field(None, description='source concept')
    target: Optional[str] = Field(None, description='target concept')
    polarity: Optional[float] = Field(
        None,
        description='edge polarity in Causemos. 1=same, -1=opposite, unknown/ambiguous otherwise',
    )
    weights: Optional[List[float]] = Field(
        None,
        description='Optional, denotes overriding weights analyts want to impose, for DySE this will be [level, trend], for Delphi this will be [weight]. If omitted engines should derive their own weights.',
    )
    statements: Optional[List[Statement]] = None


class Node(BaseModel):
    concept: Optional[str] = None
    scalingFactor: Optional[float] = Field(
        None, description='optional, provided if engine supports y-scaling'
    )
    scalingBias: Optional[float] = Field(
        None, description='optional, provided if engine supports y-scaling'
    )


class Edge1(BaseModel):
    source: Optional[str] = None
    target: Optional[str] = None
    weights: Optional[List[float]] = Field(
        None,
        description='denote inferred edge weights from the engines. e.g. for DySE this will be [level, trend], for Delphi this will be [weight]',
    )


class ModelCreationResponse(BaseModel):
    status: Optional[str] = None
    nodes: Optional[List[Node]] = None
    edges: Optional[List[Edge1]] = None


class ExperimentType(Enum):
    PROJECTION = 'PROJECTION'
    SENSITIVITY_ANALYSIS = 'SENSITIVITY_ANALYSIS'


class ModelExperimentCreationRequest(BaseModel):
    experimentType: Optional[ExperimentType] = None


class ValueItem(BaseModel):
    step: Optional[float] = None
    value: Optional[float] = None


class Constraint(BaseModel):
    concept: Optional[str] = None
    value: Optional[List[ValueItem]] = None


class ExperimentParam(BaseModel):
    startTime: Optional[float] = None
    endTime: Optional[float] = None
    numTimesteps: Optional[float] = None
    constraints: Optional[List[Constraint]] = None


class ProjectionParameters(ModelExperimentCreationRequest):
    experimentParam: Optional[ExperimentParam] = None


class AnalysisType(Enum):
    IMMEDIATE = 'IMMEDIATE'
    GLOBAL = 'GLOBAL'
    PATHWAYS = 'PATHWAYS'


class AnalysisMode(Enum):
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'


class AnalysisMethodology(Enum):
    HYBRID = 'HYBRID'
    FUNCTION = 'FUNCTION'


class PathAtt(Enum):
    INFLUENCE = 'INFLUENCE'
    SENSITIVITY = 'SENSITIVITY'


class AnalysisParam(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    pathAtt: Optional[PathAtt] = None
    numPath: Optional[float] = None


class ExperimentParam1(BaseModel):
    startTime: Optional[float] = None
    endTime: Optional[float] = None
    numTimesteps: Optional[float] = None
    analysisType: Optional[AnalysisType] = None
    analysisMode: Optional[AnalysisMode] = None
    analysisMethodology: Optional[AnalysisMethodology] = None
    analysisParam: Optional[AnalysisParam] = None


class SensitivityAnalysisParameters(ModelExperimentCreationRequest):
    experimentParam: Optional[ExperimentParam1] = None


class ExperimentType1(Enum):
    PROJECTION = 'PROJECTION'
    SENSITIVITY_ANALYSIS = 'SENSITIVITY_ANALYSIS'


class Status(Enum):
    Completed = 'Completed'
    In_Progress = 'In Progress'


class ModelExperimentStatusResponse(BaseModel):
    modelId: Optional[str] = None
    experimentId: Optional[str] = None
    experimentType: Optional[ExperimentType1] = None
    status: Optional[Status] = None
    progressPercentage: Optional[float] = None


class Result(BaseModel):
    concept: Optional[str] = None
    values: Optional[TimeSeriesDistribution] = None


class ProjectionResponse(ModelExperimentStatusResponse):
    results: Optional[List[Result]] = None


class Immediate(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    value: Optional[List[float]] = None


class Global(BaseModel):
    source: Optional[List[str]] = None
    target: Optional[List[str]] = None
    value: Optional[List[float]] = None


class Pathways(BaseModel):
    path: Optional[List[str]] = None
    score: Optional[float] = None


class SensitivityAnalysisResponse(ModelExperimentStatusResponse):
    immediate: Optional[Immediate] = None
    global_: Optional[Global] = Field(None, alias='global')
    pathways: Optional[Pathways] = None


class Edge2(BaseModel):
    source: Optional[str] = None
    target: Optional[str] = None
    polarity: Optional[float] = None
    weights: Optional[List[float]] = None


class EditEdgesRequest(BaseModel):
    edges: Optional[List[Edge2]] = None


class EditEdgesResponse(BaseModel):
    status: Optional[str] = None


class NodeParameter(BaseModel):
    concept: Optional[str] = None
    indicator: Optional[str] = None
    values: Optional[TimeSeries] = None
    numLevels: Optional[float] = Field(
        None, description='Number of discrete levels (DySE)'
    )
    resolution: Optional[str] = Field(
        None, description='Describes resolution of values, e.g. month, year'
    )
    period: Optional[float] = Field(
        None,
        description='Indicates seasonality period. If period=1 then there is no seasonality.',
    )
    minValue: Optional[float] = Field(
        None, description='absolute mininum the value can go'
    )
    maxValue: Optional[float] = Field(
        None, description='absolute maximum the value can go'
    )


class ModelCreationRequest(BaseModel):
    id: Optional[str] = Field(None, description='A Causemos model UUID')
    nodes: Optional[List[NodeParameter]] = Field(
        None, description='Nodes and their parameterizations'
    )
    edges: Optional[List[Edge]] = None
